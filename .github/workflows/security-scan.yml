name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch: # Allow manual trigger

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
        continue-on-error: true

      - name: Run npm audit for all services
        run: |
          services="backend/user-service backend/product-service backend/order-service frontend"
          for service in $services; do
            echo "Scanning $service..."
            cd $service
            npm audit --production --audit-level=moderate
            cd -
          done

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          cd backend/user-service && license-checker --summary
          cd ../product-service && license-checker --summary
          cd ../order-service && license-checker --summary
          cd ../../frontend && license-checker --summary

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: "terraform"
          iac_dir: "terraform"
          policy_type: "aws"
          only_warn: true

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform
          format: sarif
          soft_fail: true

  docker-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, product-service, order-service, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            docker build -t ${{ matrix.service }}:scan ./frontend
          else
            docker build -t ${{ matrix.service }}:scan ./backend/${{ matrix.service }}
          fi

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: "${{ matrix.service }}:scan"
          fail-build: false
          severity-cutoff: high

      - name: Run Syft SBOM generator
        uses: anchore/sbom-action@v0
        with:
          image: "${{ matrix.service }}:scan"
          format: spdx-json
          output-file: "${{ matrix.service }}-sbom.spdx.json"

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-sbom
          path: ${{ matrix.service }}-sbom.spdx.json
